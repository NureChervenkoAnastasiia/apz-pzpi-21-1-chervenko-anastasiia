1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Програмна система для автоматизації роботи закладів громадського харчування "Tastify" складається з бази даних, серверної частини, веб-застосунку, мобільного застосунку та IoT застосунку.
Серверна частина написана на мові C# із використанням технології ASP.NET Core (.Net 8), вона відповідає за обробку запитів від клієнта та реалізацію бізнес-логіки.
База даних, що використовується для зберігання і управління даними, розроблена у середовищі управління базами даних MongoDB.
Мобільний застосунок на мові програмування Java, IoT пристрій на Arduino та вебсайт на React взаємодіють із сервером за допомогою REST API.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Вибір технологій для розробки серверної частини програмної системи був обґрунтований функціональними вимогами визначеної системи та досвідом розробки у минулих проєктах. Таким чином, була обрана платформа .NET 8 для написання серверної частини. А саме платформа ASP.NET Core, яка забезпечує гнучкість, широкі можливості, продуктивність і сучасні можливості для розробки вебзастосунків. В ASP.NET Core були створені контролери для RESTful вебсервісів, які взаємодіють за принципами архітектурного стилю REST. 
Системою управління баз даних була обрана MongoDB, бо вона відрізняється гнучкістю, масштабованістю та високою продуктивністю. MongoDB зберігає дані у форматі BSON (бінарний JSON), що дозволяє зберігати документи різної структури та легко змінювати схему даних у процесі розробки. Також MongoDB підтримує шардінг, що дозволяє розподіляти дані на кілька серверів, забезпечуючи високу доступність та масштабованість та складні індекси, які підвищують швидкість запитів до бази даних. Існує добре підтримуваний офіційний драйвер MongoDB для C#, який легко інтегрується з проектами на .NET 8 ASP.NET Core, забезпечуючи простий доступ до всіх функціональних можливостей MongoDB і додатково існує багато бібліотек, які полегшують інтеграцію з ASP.NET Core, включаючи інструменти для керування підключенням, обробки даних і виконання запитів. 
Комунікація між сервером та клієнтською частиною здійснюється за допомогою використання REST API, бо він забезпечує простоту, гнучкість та стандартизацію взаємодії між клієнтами та серверами за допомогою стандартних HTTP-методів, сприяючи легкій інтеграції та ефективному обміну даними у розподілених системах. Також підтримує робота з форматом даних JSON. Більше детально розглянути взаємодію серверної частини з іншими елементами системи можна на UML діаграмі розгортання (див. рис. 3.1).

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Проєкт складається з кількох ключових компонентів, організованих за принципами багатошарової архітектури, що забезпечує чітке розділення обов'язків та сприяє легкій підтримці й масштабуванню. Контролери обробляють HTTP-запити від клієнтів і повертають відповідні HTTP-відповіді. Вони відповідають за маршрутизацію запитів до відповідних сервісів. DTOs (Data Transfer Objects) - об'єкти для передачі даних між шарами програми. Вони використовуються для перенесення даних між контролерами і сервісами, а також для спрощення мапінгу даних. Entities (Сутності) - містять властивості, що відображають структуру даних, збережених у базі даних. Services (Сервіси) створені для використання окремого сервісного рівня для бізнес-логіки. Інтерфейси (IService) та їх реалізації (Service) сприяють кращому управлінню залежностями та забезпечують можливість тестування. Mapping (Мапінг) містить профілі AutoMapper, які використовуються для автоматичного перетворення об'єктів між різними рівнями (з DTO до Entity і навпаки). Це спрощує маппінг даних між різними моделями. Впровадження залежностей (Dependency Injection, DI) використовується для управління залежностями та їх ін'єкціями. Наприклад, файли SecurityInjection.cs і ServicesInjection.cs відповідають за налаштування ін'єкції залежностей, забезпечуючи централізоване управління конфігураціями та зручність заміни компонентів.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Після визначення сутностей системи та їх атрибутів, слід перейти до дослідження можливих сценаріїв використання програмної системи користувачами. Тож для визначення цих сценаріїв було розроблено UML діаграму прецедентів, де були визначені три актори: відвідувач закладів громадського харчування працівники закладу (див. рис. Б.2 у додатку Б) та адміністратори (див. рис. Б.3 у додатку Б). Розглянемо детально функціонал, доступний кожному з перелічених акторів.
Відвідувач закладів громадського харчування має доступ лише до мобільного застосунку. Там у нього є можливість зареєструватися чи увійти за допомогою логіну та пароля у вже існуючий акаунт. Шляхом редагування особистої інформації, заданої під час реєстрації користувач може змінити інформацію про себе. Після авторизації, користувач може переглянути інформацію про заклад громадського харчування та його меню. Після чого він може обрати напої та страви до замовлення. Відвідувач може створити нове бронювання стола у певному ресторані на певний час, переглянути свої минулі бронювання, редагувати та видаляти заплановані. Також кожен користувач за відвідування закладу накопичує бонусні бали, які можуть бути конвертовані у знижку на наступне замовлення. Він може переглянути кількість балів та конвертувати бали у купон на знижку у своєму особистому профілі. Також додатково під час дії бронювання користувач має змогу викликати офіціанта прямо у застосунку.
Працівник закладу має доступ лише до вебсайту. Там він може авторизуватися, увійшовши у свій особистий акаунт за допомогою логіну та паролю. Лише після цього користувачу буде надано доступ до усього іншого функціоналу. Працівник закладу може переглядати меню закладу, графік роботи, відкривати та закривати свою зміну. Додатково можливо переглянути та змінити інформацію про столи у закладі та замовлення. може увійти у свій особистий акаунт для перегляду свого особистого розкладу на 7 днів. Далі він може переглянути інформацію про певний візит та змінити встановлений діагноз чи поле для додаткової інформації про візит.
Адміністратор також має доступ лише до вебсайту. Для початку роботи він так само повинен авторизуватися у системі, увійшовши за допомогою свого логіну та паролю. Після чого він може перейти до безпосередньої роботи з функціоналом системи. Адміністратор може переглянути список усіх працівників закладу, додати чи видалити працівника та змінити особисту інформацію про нього. Так само адміністратор може додати, видалити та редагувати наявні харчові продукти, страви та напої у меню закладу, гостей, столи та замовлення. Також адміністратор може отримати та змінити інформацію про графік роботи усіх працівників. А також отримати звіт за тиждень з кількістю відпрацьованих годин кожним працівником у порядку спадання. Він може переглянути інформацію про усі бронювання, змінити інформацію про них, додавати нові бронювання та видаляти вже існуючі. Додатковими можливостями є отримання статистики замовлень страв та напоїв у ресторані для відстеження кількості замовлень для кожної позиції меню конкретного ресторану і популярності цих самих страв та напоїв. Також адміністратор має можливість створення резервних копій бази даних та відновлення бази даних за певною резервною копією за її датою.
               
5 ПОБУДОВА ER-ДІАГРАМИ

Перед розробкою серверної частини необхідно чітко визначити та детально описати усі необхідні для реалізації визначеного функціоналу сутності. Тому для визначення усіх необхідних сутностей та зв’язків між ними, для системи була створена ER-діаграма (див. рис. Б.1 у додатку Б).
Модель даних охоплює наступні компоненти та відповідні атрибути для них:
а) Ресторан (назва, адреса, номер телефону, електрона пошта, опис, кухня);
б) Меню (ресторан, назва страви чи напою, розмір порції, ціна, опис, тип);
в) Працівник ресторану (ім’я, посада, погодинна заробітна плата, номер телефону, код картки відвідування, логін, пароль, ресторан);
г) Розклад (працівник, дата та час початку зміни, дата та час кінця зміни);
д) Продукт (назва, поточна кількість у наявності);
е) Замовлення (номер, стіл, дата та час, коментар, статус).
ж) Стіл (номер, статус);
к) Бронювання (стіл, гість, дата та час, кількість гостей, коментар);
л) Гість (ім’я, номер телефону, кількість бонусів, логін, електрона пошта, пароль).
Кожна сутність має визначені поля для найефективнішої реалізації  запланованого функціоналу системи. Додатково додані спеціальні поля для зберігання коментарів співробітників про вподобання гостей, статуси столів та замовлень. Це зроблено з метою відстеження завантаженості закладів та етапів приготування їжі та етапів закриття рахунку за замовлення.

6 СПЕЦИФІКАЦІЯ REST

У цьому проєкті REST використовується для створення сервера з низкою API-маршрутів. Кожен маршрут відповідає за обробку певного ресурсу або функції, а HTTP-методи (POST, GET, PUT, DELETE) визначають тип взаємодії з цими ресурсами. Загалом є 62 кінцеві точки, які дозволяють виконувати різноманітні операції з даними через API. Специфікація REST API наведена в таблиці 1 нижче.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Була визначена необхідність змоделювати поведінку об'єктів системи у відповідь на різні події для того щоб визначити, як об'єкт переходить від одного стану до іншого при настанні певних умов. Тому було вирішено розробити діаграму станів для кожного з акторів системи (див. рис. Б.3 у додатку Б для адміністратора системи,  рис. Б.4 у додатку Б для працівника закладу громадського харчування та рис. Б.5 у додатку Б для відвідувача закладу). Діаграми були використані для полегшення розуміння системи або моделі, структури та поведінки. Також діаграми були використані під час аналізу та проєктування системи для ідентифікації ключових станів об'єктів і визначення можливих переходів між ними. Такі дії допомагають уникнути непередбачених ситуацій та розробити доцільний дизайн.

ВИСНОВКИ

В результаті виконання лабораторної роботи була спроєктована, розроблена та протестована серверна частина програмної системи для управління ветеринарними лікарнями. Були розроблені UML діаграма розгортання (Deployment Diagram), UML діаграма прецедентів (Use Case Diagram), ER-діаграма даних (Entity-Relationship Model), UML діаграма станів (State Diagram). Було записано відеоролик, який демонструє роботу основних функцій системи (https://youtu.be/lL7LAtaKob0?si=UkZUK7p6AaSdPak5).

ДОДАТОК А
Специфікація REST
