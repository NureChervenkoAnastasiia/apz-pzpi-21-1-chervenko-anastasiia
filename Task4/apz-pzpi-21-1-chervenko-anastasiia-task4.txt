1	Побудова UML діаграми прецедентів

Перед розробкою клієнтською частини необхідно чітко визначити та детально описати усі заплановані функціональні вимоги до системи та її користувачів. Було визначено, що клієнтською частиною у веб-режимі будуть користуватися працівники закладів громадського харчування та адміністратори, що зображено на розробленій діаграмі прецедентів (див. рис. Б.1 та рис. Б.2 у додатку Б).
На діаграмі наведено усі можливості працівника та адміністратора системи. Працівник закладу громадського харчування може авторизуватися у системі, переглянути меню закладу з фільтрацією по певному типу позиції, переглянути та змінити свій особистий акаунт, столи та замовлення. Також він може переглянути усі свої відпрацьовані робочі зміни та додати нову. 
Адміністратор має доступ до усього функціоналу, що доступний звичайним працівникам. Додатково він може переглянути список усіх працівників закладу, додати чи видалити працівника та змінити особисту інформацію про нього. Так само адміністратор може додати, видалити та редагувати наявні харчові продукти, страви та напої у меню закладу, гостей, столи та замовлення. Також адміністратор може отримати та змінити інформацію про графік роботи усіх працівників. А також отримати звіт за тиждень з кількістю відпрацьованих годин кожним працівником у порядку спадання. Він може переглянути інформацію про усі бронювання, змінити інформацію про них, додавати нові бронювання та видаляти вже існуючі. Додатковими можливостями є отримання статистики замовлень страв та напоїв у ресторані для відстеження кількості замовлень для кожної позиції меню конкретного ресторану і популярності цих самих страв та напоїв. 
Також адміністратор має можливість створення резервних копій бази даних та відновлення бази даних за певною резервною копією за її датою.

2	Побудова UML діаграми компонент

Для більш детальної візуалізації архітектури системи було розроблено діаграму компонентів (див. рис. Б.3 у додатку Б). Каталог public містить файли, які повинні бути доступні публічно, тобто ті, які сервер буде обслуговувати безпосередньо. Це включає: index.html (головна HTML-сторінка, яка є точкою входу у веб-застосунок, яка завантажує основний JavaScript код та стилі), стильові файли, які застосовуються до HTML, шрифти, використовувані у проекті, зображення, використовувані на сторінках та файли локалізації для підтримки англійської та української мов (en.json, ua.json). Каталог Private містить усі вихідні файли проекту, які не будуть безпосередньо доступні публічно. Це компоненти JavaScript коду, стилі, специфічні для компонентів, і інші ресурси, що використовуються під час побудови додатку. 
Файл LoginPage.html не розміщений у жодному з підкаталогів (admin чи staff), оскільки він обслуговує спільну функціональність, яка не прив'язана до жодної конкретної ролі. Це точка входу для автентифікації користувачів, незалежно від того, чи є вони адміністраторами чи працівниками. Це спрощує підтримку і зменшує дублювання коду, так як одна й та ж сторінка входу може бути використана для всіх типів користувачів. Розділення на staff і admin в обох каталогах (components і pages) дозволяє чітко розмежувати функціональність і компоненти, які належать до різних ролей користувачів: Admin (адміністратор) – ці компоненти та сторінки призначені для адміністративних функцій, таких як управління даними, меню, замовленнями, продуктами, рестораном, розкладом та персоналом та Staff (персонал) – ці компоненти та сторінки призначені для повсякденних завдань персоналу, таких як управління замовленнями, перегляд розкладу, профіль користувача. 
Таке розділення забезпечує чіткість та організованість коду, розмежування доступу (полегшує впровадження правил доступу та авторизації, оскільки чітко визначено, які частини додатку належать до якої ролі), модульність і масштабованість оскільки дозволяє легше додавати нові функції для конкретної ролі без ризику порушення функціональності іншої ролі. App.js є основним файлом додатку, який імпортує та використовує інші компоненти. Він відповідає за маршутизацію між HTML-сторінками. Ця структура організована таким чином, щоб розділити функціональність адміністратора та персоналу, забезпечуючи чіткий поділ обов'язків і зручність у навігації та підтримці коду. Вона полегшує підтримку, масштабування та розвиток проекту, забезпечуючи чітке розмежування функціональних областей і ролей користувачів.

3	Побудова UML діаграми станів

Була визначена необхідність змоделювати поведінку об'єктів системи у відповідь на різні події для того щоб визначити, як об'єкт переходить від одного стану до іншого при настанні певних умов. Тому було вирішено розробити діаграму станів для кожного з акторів системи (див. рис. Б.4 у додатку Б для адміністратора системи,  рис. Б.5 у додатку Б для працівника закладу громадського харчування). Діаграми були використані для полегшення розуміння системи або моделі, структури та поведінки. Також діаграми були використані під час аналізу та проєктування системи для ідентифікації ключових станів об'єктів і визначення можливих переходів між ними. 
Як бачимо, для початку роботи і адміністратор і працівник повинні спочатку увійти до свого особистого акаунту, використовуючи логін та пароль. Після цього кроку користувачі можуть у будь-який момент вийти з свого акаунта. Після цього вони вже отримують безпосередній допуск до роботи з усім функціоналом системи. Працівник закладу може продивлятися та змінювати інформацію про меню, особистий акаунт, столи, замовлення, свої відпрацьовані робочі зміни (та за потреби додати нову).
Адміністратор системи, увійшовши до свого акаунту, отримує можливість перейти до керування працівниками, меню, столами, бронюваннями, розкладом роботи, продуктами, та базою даних системи.

4	Побудова UML діаграми діяльності

Наступним кроком було створено UML діаграму діяльності (див. див. рис. Б.6 у додатку Б). Визначено, що спочатку для роботи з системою користувач повинен увійти до свого акаунту. Якщо дані будуть введені правильно, то користувач отримує доступ до усіх інших функцій програмної системи. Усі дії зі зміни, видалення чи додавання інформації обов’язково повинні бути додатково підтверджені для запобігання втрати важливих чи додавання некоректних даних.
Після завершення моделювання програмної системи було визначено основні потреби програмної системи автоматизації управління закладів громадського харчування «Tastify» та розроблено UML діаграму прецедентів, UML діаграму компонент, UML діаграму станів та UML діаграму діяльності. Наступним кроком можна розпочинати реалізацію інженерних рішень. 

5	АРХІТЕКТУРА КЛІЄНТСЬКОЇ ЧАСТИНИ

У розробці клієнтської частини були використані  HTML, CSS, JavaScript. Взаємодія з сервером частково була реалізована за допомогою  Fetch API (шляхом виконання асинхронних запитів до серверу та отримання/відображення даних на сторінці).  Був використано DOM API для роботи з HTML-документами напряму. Логіка розділена на функції, наприклад, для виклику серверних операцій, отримання та відображення даних. Загалом система орієнтована на RESTful API, власне за допомогою якого і була розроблена серверна частина системи на попередній роботі. 
Архітектуру проекту можна описати як модульну та багатошарову архітектуру. Використання модульної архітектури організовує код у незалежні та взаємозамінні модулі. Кожен модуль має чітко визначену роль і може бути розроблений, протестований, змінений та повторно використаний окремо від інших модулів. Багатошарова архітектура організовує систему на кілька шарів або рівнів, кожен з яких виконує певну роль. 
Код JavaScript, який працює у браузері, відповідає за взаємодію з користувачем (відображення замовлень, заповнення випадних списків, обробку подій натискання кнопок та інше), тому це презентаційний шар. Шар логіки реалізовує серверний API, який обробляє HTTP-запити, відповідає за обробку запитів до бази даних, виконання бізнес-логіки, та повернення відповідей клієнту. Шар доступу до даних також знаходиться у серверній частині застосунку і відповідає за збереження та отримання даних з бази даних. Але при цьому він відокремлений від сервісів з бізнес-логікою застосунку та контролерів, які відповідають лише за отримання HTTP-запитів та відправці HTTP-відповідей.
Комунікація між сервером та клієнтською частиною здійснюється за допомогою використання REST API, бо він забезпечує простоту, гнучкість та стандартизацію взаємодії між клієнтами та серверами за допомогою стандартних HTTP-методів, сприяючи легкій інтеграції та ефективній обміну даними у розподілених системах та підтримує роботу з форматом даних JSON. 
HTML файли відповідають за структуру і вміст веб-сторінок. CSS файли відповідають за стильове оформлення веб-додатку. JavaScript файли відповідають за логіку на стороні клієнта, розташовані в директорії src/components для модульних компонентів та інших скриптів клієнтської логіки. Файли Локалізації (en.json і ua.json) забезпечують підтримку інтернаціоналізації, дозволяючи додатку підтримувати англійську та українську мови. Архітектура проекту добре структурована і модульна, з чітким розподілом відповідальностей. Ця архітектура відповідає типовій структурі додатку на основі React, використовуючи компоненти для управління функціональністю і публічну директорію для статичних ресурсів і локалізації. 
Розглянемо на прикладі JavaScript код вебсторінки для адміністрування столів у закладі громадського харчування адміністратором (див. код функції у розділі А.1 додатку А). Цей код є JavaScript скриптом для веб-сторінки, який керує таблицею "Tables" за допомогою API. Після завантаження сторінки та DOM (DOMContentLoaded), виконується fetchTables для отримання даних про таблиці з API та їх відображення. Функція getToken отримує токен з localStorage для авторизації запитів. Функція fetchTables робить запит до API, отримує список таблиць та передає його до displayTables для відображення. Функція displayTables створює HTML-рядки для кожної таблиці та додає їх до таблиці у DOM. Користувач може додавати, редагувати, зберігати, видаляти або скасовувати зміни таблиць. Ці дії обробляються відповідними функціями (handleAdd, handleEdit, handleSave, handleDelete, handleCancel), які роблять запити до API та оновлюють відображення таблиць після завершення дії. 
Такий підхід забезпечує чітку архітектуру та розділення обов'язків між різними частинами коду, що полегшує підтримку та розширення функціональності.

6	ВИСНОВКИ

В результаті виконання лабораторної роботи була спроектована, розроблена та протестована клієнтська (front-end) частина програмної системи для управління ветеринарними лікарнями. Були розроблені UML діаграма прецедентів (Use Case Diagram), UML діаграма станів (State Diagram), UML діаграма компонент та UML діаграма діяльності (Activity Diagram).

 
