1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ

У розробці мобільного застосунку була використана мова програмування Kotlin. Kotlin повністю сумісний з Java, що дозволяє використовувати існуючий код на Java та бібліотеки разом з новими функціями Kotlin. Kotlin дозволяє писати менше коду завдяки лаконічним синтаксичним конструкціям. Зменшення кількості шаблонного коду робить програму більш зрозумілою та менш схильною до помилок. Kotlin має вбудовані механізми для роботи з нульовими значеннями, що знижує ймовірність виникнення помилок NullPointerException. Kotlin підтримує функціональне програмування, що дозволяє використовувати лямбда-вирази, високорівневі функції та інші функціональні конструкції. Це сприяє більшій гнучкості та виразності коду. Використання Kotlin для розробки мобільних застосунків на Android дає змогу розробникам створювати надійні, ефективні та підтримувані програми з меншою кількістю коду та кращою інтеграцією сучасних можливостей мов програмування. Середою розробки було обрано Android Studio. 
Проект було розроблено за принципами багатошарової архітектури. Вона представлена презентаційним шаром (директорії activities та adapters, які відповідають безпосередньо за відображення даних та взаємодію з користувачем), доменним шаром (директорія services, яка містить бізнес-логіку застосунку, бо сервіси взаємодіють з моделями відповідними до бази даних та відповідають за основні операції з цими даними) та шаром даних (він містить власне моделі даних у директорії models та у директорії api, де знаходяться класи для з’єднання з базою даних та виконання усіх HTTP-запитів до серверної частини застосунку). 

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Перед розробкою мобільної частини необхідно чітко визначити та детально описати усі заплановані функціональні вимоги до системи та її користувачів. Було визначено, що мобільним застосунком будуть користуватися працівники закладів громадського харчування та адміністратори, що зображено на розробленій діаграмі прецедентів (див. рис. Б.1 у додатку Б).
На діаграмі наведено усі можливості у застосунку відвідувачів закладів. Вони можуть подивитися свою особисту інформацію та змінити її. Також вони можуть дізнатися свою поточну кількість бонусів та зробити з них купон на знижку. Користувачі мобільного застосунку можуть переглянути меню закладу та свої бронювання. Додатково є можливість створити нове бронювання, обравши стіл, дату та час, кількість людей та за бажанням додавши коментар. Бронювання можна відмінити чи змінити. А якщо користувач ще не має особистого аканту – він повинен спочатку зареєструватися, потім увійти у нього для продовження роботи із застосунком.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
 
Була розроблена діаграма пакетів (див. рис. Б.3 у додатку Б) для візуалізації використаних пакетів у проекті. Вона покращить розуміння структури проекту та взаємозв’язків між його компонентами, тож розглянемо її детально. Для розширення можливостей Kotlin у Android використовується пакет core-ktx, який забезпечує зручну та ефективну взаємодію з різними компонентами Android. Таким чином використання цього пакету дозволить розробникам писати більш чистий, безпечний та компактний код. Це значно прискорить розробку та спростить підтримку застосунку. Додатково був підключен пакет appcompat для підтримки старих версій Android і забезпечення сумісності з сучасними функціями. застосовується пакет appcompat. Таким чином додатки, які будуть виглядати цілком однаково, зможуть працювати на різних версіях Android. 
Був підключен пакет material для створення інтерфейсів користувача з компонентами Material Design для створення привабливих і сучасних інтерфейсів простішим шляхом, забезпечуючи при цьому однаковий вигляд додатків на різних платформах. Пакет ConstraintLayout  надає можливість створення адаптивних та гнучких макетів інтерфейсу з автоматичними налаштуваннями до екранів пристроїв. Це значно спрощує розробку складних інтерфейсів користувача та забезпечує швидку розробку застосунків шляхом чіткого контролю розташування елементів інтерфейсу. Була підключена бібліотека retrofit, яка значно спрощує роботу з мережевими HTTP-запитами, забезпечуючи високий рівень абстракції та підтримку різних форматів обміну даними.  HTTP клієнт okhttp використовується для взаємодії з веб-службами через HTTP запити. OkHttp забезпечує швидку та надійну роботу з мережевими запитами, маючи при цьому простий та легкий у використанні інтерфейс. 
Для декодування JSON Web Token (JWT) була підключена бібліотека jwtdecode. Вона надає можливість перевіряти автентифікаційні та авторизаційні токени  шляхом декодування та розшифрування JWT. Використання JWT спрощує реалізацію механізмів аутентифікації та авторизації в додатках, забезпечуючи безпеку та конфіденційність даних. 

4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТ
 
Для відображення усіх компонентів системи була розроблена діаграма компонент (див. рис. Б.4 у додатку Б). Розглянемо детально усі основні компоненти системи, які зосереджено у директоріях activities, api, adapters, services, models та util. У директорії activities знаходяться основні екранні компоненти застосунку, кожен з яких відповідає за окремий екран і взаємодію користувача з цим екраном. Наприклад, BookingsActivity.kt відповідає за екран бронювань столів у закладі громадського харчування (див. код А.1 у додатку А). Директорія api містить у собі компоненти для роботи з мережею, а саме ApiService.kt – відповідає за виконання HTTP-запитів та отримання HTTP-відповідей від серверної частини застосунку, NetworkModule.kt – відповідає за налаштування мережевого підключення, TokenManager.kt – відповідає за роботу з JWT-токенами для авторизації відвідувача закладу та отримання даних про нього, як про авторизованого користувача. 
Директорія adapters містить усі необхідні адаптери для відображеня списків даних у RecyclerView. Наприклад, BookingsAdapter – буде відповідати за відображення списку усіх бронювань авторизованого гостя (див. код А.2 у додатку А), а MenuAdapter – за відображення списку усіх страв та напоїв з меню закладу. У пакеті models знаходяться усі необхідні моделі даних для відображення структури даних, що обробляються у застосунку та зберігаються у базі даних.  У директорії services знаходяться сервіси, що відповідають за виконання бізнес-логіки застосунку: AuthService.kt – містить функції для входу у застосунок та реєстрації нового користувача, BookingsService.kt – містить функції для роботи з бронюваннями користувача (див. код А.3 у додатку А), ProfileService.kt – містить функції для роботи з особистими даними користувача та його бонусними балами. І пакет util містить допоміжні класи та утіліти, як DateTypeUtil – для форматування дати та NavigationUtil – для налаштування навігації між екранами застосунку.

5 ПОБУДОВА ДІАГРАМИ СТАНІВ

Було розроблено діаграму станів для відвідувача закладу громадського харчування (див. рис. Б.2 у додатку Б). Ця діаграма відображує стани системи та події, які можуть призвести до переходу від одного стану до іншого. А також вона відображує дії, які можуть відбуватися відповідно у кожному з станів. Тож користувач має доступ до входу у систему за особистим акаунтом, створення цього особистого акаунта, роботи з меню закладу та своїми бронюваннями. 

ВИСНОВКИ

В результаті виконання лабораторної роботи була спроектована, розроблена та протестована мобільна частина програмної системи для управління ветеринарними лікарнями. Були розроблені UML діаграма прецедентів (Use Case Diagram), UML діаграма пакетів (State Diagram), UML діаграма компонент (Component Diagram) та UML діаграма станів (Activity Diagram). Було записано відеоролик, який демонструє роботу системи.